# -*- coding: utf-8 -*-
"""task lab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lu13JW4ZVmign5cPG5guh3lKtwqzGC9d
"""

import time
import numpy as np

def calculate_item_similarity(user_item_matrix):

    start_time = time.time()

    # Calculate item means
    item_means = np.mean(user_item_matrix, axis=0)

    # Subtract item means from user ratings
    adjusted_ratings = user_item_matrix - item_means[None, :]

    # Calculate adjusted cosine similarity
    num_items = user_item_matrix.shape[1]
    similarity_matrix = np.zeros((num_items, num_items))

    for i in range(num_items):
        for j in range(i + 1, num_items):
            # Get ratings for items i and j
            ratings_i = adjusted_ratings[:, i]
            ratings_j = adjusted_ratings[:, j]

            # Calculate dot product and magnitudes
            dot_product = np.dot(ratings_i, ratings_j)
            magnitude_i = np.linalg.norm(ratings_i)
            magnitude_j = np.linalg.norm(ratings_j)

            # Calculate similarity
            if magnitude_i != 0 and magnitude_j != 0:
                similarity = dot_product / (magnitude_i * magnitude_j)
            else:
                similarity = 0

            similarity_matrix[i, j] = similarity
            similarity_matrix[j, i] = similarity  # Ensure symmetry

    end_time = time.time()
    print(f"Item similarity calculation time (adjusted cosine): {end_time - start_time:.4f} seconds")
    return similarity_matrix

def calculate_user_similarity(user_item_matrix):
    """
    Calculates user-user similarity matrix using cosine similarity.

    Args:
        user_item_matrix: User-item interaction matrix.

    Returns:
        User-user similarity matrix.
    """
    start_time = time.time()

    num_users = user_item_matrix.shape[0]
    similarity_matrix = np.zeros((num_users, num_users))

    for i in range(num_users):
        for j in range(i + 1, num_users):
            # Get ratings for users i and j
            ratings_i = user_item_matrix[i, :]
            ratings_j = user_item_matrix[j, :]

            # Calculate dot product and magnitudes
            dot_product = np.dot(ratings_i, ratings_j)
            magnitude_i = np.linalg.norm(ratings_i)
            magnitude_j = np.linalg.norm(ratings_j)

            # Calculate similarity
            if magnitude_i != 0 and magnitude_j != 0:
                similarity = dot_product / (magnitude_i * magnitude_j)
            else:
                similarity = 0

            similarity_matrix[i, j] = similarity
            similarity_matrix[j, i] = similarity  # Ensure symmetry

    end_time = time.time()
    print(f"User similarity calculation time (cosine): {end_time - start_time:.4f} seconds")
    return similarity_matrix

# Example usage
user_item_matrix = np.random.randint(0, 6, size=(100, 1000))

# Calculate item-item similarity
item_similarity = calculate_item_similarity(user_item_matrix)

# Calculate user-user similarity
user_similarity = calculate_user_similarity(user_item_matrix)

